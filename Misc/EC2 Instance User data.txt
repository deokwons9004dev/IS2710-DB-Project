#!/bin/bash

UNIX_USER="ubuntu"
UNIX_USER_HOME="/home/ubuntu"
ENVIRONMENT_PATH="/home/ubuntu/environment"
UNIX_GROUP=$(id -g -n "$UNIX_USER")

# add SSH key
install -g "$UNIX_GROUP" -o "$UNIX_USER" -m 755 -d "$UNIX_USER_HOME"/.ssh
cat <<'EOF' >> "$UNIX_USER_HOME"/.ssh/authorized_keys
# Important
# ---------
# The following public key is required by Cloud9 IDE
# Removing this key will make this EC2 instance inaccessible by the IDE
#
cert-authority ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/r+QKVu1Nbpub8ecIkSu1ucBOBxB6XvA4ZG9ngK3sYIM9gghwivQ4wXOXF1FZpkt+A0VdsLsf8uYDV882mggL7CGX5/AGpeyKvpeiT0aKIk/XQmRpgnzUlFAxu9lmuv0hxXGR47viZEcs1DT4Z9sWjhJjNjK2o9vXVOc6bZ9IIsNJbL25FBo+52DGjP0LG7b5ZNJPM+JJaqh4axZd/IdfYTnc8NXQFqceX4kDRjMMQsJBzaf1NJFqdtWADI0M9yK5ENduJOAm98dLFtYuEgE1L30wcdf9UeLy7TzxzkMv5r3UEKN4AjL3w/j3SlRj7NYwUxIFJAisBGLTxWtZob36WbO0qYwWggKBP6FLk+tqTI2ZKyYHT5HJAMCELQkCg+wyT74eO+07LmU4JoNfM/U33dbXbo0Pty+swYxrgMHSPeL5VNr3EnDWzqHMTW0rLwL9ra/7Btu/cRIMG1sttWv8hSc51ZIGFGeva2mmBOqouhtePAHqroSAtwjmA9iNHdSh9A5R3MUk7TsIkC4Kv/apqihIrUqh0yBbpqNFv0drQLhf8tFrm18D38xQY5ZxVdaT4busLkmH9HTQHLy0Tau2wpBGIv4Wqe98V6qk1uWE5/rW/DYzs4sPOh6I+xQSthhSyoImFFoznxfD0jHJMLHxgpOYlHJw/yDMsN1NNhU7Ow== 0978f03a4ad8445bb47bde01afb089e6@cloud9.amazon.com


#
# Add any additional keys below this line
#

EOF

# allow automatic shutdown
echo "$UNIX_USER    ALL=(ALL) NOPASSWD: /sbin/poweroff, /sbin/reboot, /sbin/shutdown" >> /etc/sudoers

ln -s /opt/c9 "$UNIX_USER_HOME"/.c9
chown -R "$UNIX_USER":"$UNIX_GROUP" "$UNIX_USER_HOME"/.c9 /opt/c9
install -g "$UNIX_GROUP" -o "$UNIX_USER" -m 755 -d "$ENVIRONMENT_PATH"

if [ "$ENVIRONMENT_PATH" == "/home/ec2-user/environment" ] && grep "alias python=python27" "$UNIX_USER_HOME"/.bashrc; then

	cat <<'EOF' > "$UNIX_USER_HOME"/.bashrc
# .bashrc

export PATH=$PATH:$HOME/.local/bin:$HOME/bin

# load nvm
export NVM_DIR="$HOME/.nvm"
[ "$BASH_VERSION" ] && npm() {
	# hack: avoid slow npm sanity check in nvm
	if [ "$*" == "config get prefix" ]; then which node | sed "s/bin\/node//";
	else $(which npm) "$@"; fi
}
# [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
rvm_silence_path_mismatch_check_flag=1 # prevent rvm complaints that nvm is first in PATH
unset npm # end hack


# User specific aliases and functions
alias python=python27

# modifications needed only in interactive mode
if [ "$PS1" != "" ]; then
	# Set default editor for git
	git config --global core.editor /usr/bin/nano

	# Turn on checkwinsize
	shopt -s checkwinsize

	# keep more history
	shopt -s histappend
	export HISTSIZE=100000
	export HISTFILESIZE=100000
	export PROMPT_COMMAND="history -a;"

	# Source for Git PS1 function
	if ! type -t __git_ps1 && [ -e "/usr/share/git-core/contrib/completion/git-prompt.sh" ]; then
		. /usr/share/git-core/contrib/completion/git-prompt.sh
	fi

	# Cloud9 default prompt
	_cloud9_prompt_user() {
		if [ "$C9_USER" = root ]; then
			echo "$USER"
		else
			echo "$C9_USER"
		fi
	}

	PS1='\[\033[01;32m\]$(_cloud9_prompt_user)\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " (%s)" 2>/dev/null) $ '
fi

EOF

	chown "$UNIX_USER":"$UNIX_GROUP" "$UNIX_USER_HOME"/.bashrc
fi

if [ "$ENVIRONMENT_PATH" == "/home/ec2-user/environment" ] && [ ! -f "$ENVIRONMENT_PATH"/README.md ]; then
	cat <<'EOF' >> "$ENVIRONMENT_PATH"/README.md
		 ___        ______     ____ _                 _  ___
		/ \ \      / / ___|   / ___| | ___  _   _  __| |/ _ \
	   / _ \ \ /\ / /\___ \  | |   | |/ _ \| | | |/ _` | (_) |
	  / ___ \ V  V /  ___) | | |___| | (_) | |_| | (_| |\__, |
	 /_/   \_\_/\_/  |____/   \____|_|\___/ \__,_|\__,_|  /_/
 -----------------------------------------------------------------


Hi there! Welcome to AWS Cloud9!

To get started, create some files, play with the terminal,
or visit https://docs.aws.amazon.com/console/cloud9/ for our documentation.

Happy coding!

EOF

	chown "$UNIX_USER":"$UNIX_GROUP" "$UNIX_USER_HOME"/environment/README.md
fi

# Fix for permission error when trying to call `gem install`
chown "$UNIX_USER" -R /usr/local/rvm/gems

#This script is appended to another bash script, so it does not need a bash script file header.

UNIX_USER_HOME="/home/ubuntu"

C9_DIR=$UNIX_USER_HOME/.c9
CONFIG_FILE_PATH="$C9_DIR"/autoshutdown-configuration
VFS_CHECK_FILE_PATH="$C9_DIR"/stop-if-inactive.sh

echo "SHUTDOWN_TIMEOUT=30" > "$CONFIG_FILE_PATH"
chmod a+w "$CONFIG_FILE_PATH"

echo -e '#!/bin/bash
set -euo pipefail
CONFIG=$(cat '$CONFIG_FILE_PATH')
SHUTDOWN_TIMEOUT=${CONFIG#*=}
if ! [[ $SHUTDOWN_TIMEOUT =~ ^[0-9]*$ ]]; then
	echo "shutdown timeout is invalid"
	exit 1
fi
is_shutting_down() {
	is_shutting_down_system_d &> /dev/null || is_shutting_down_init_d &> /dev/null
}
is_shutting_down_system_d() {
	local TIMEOUT
	TIMEOUT=$(busctl get-property org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager ScheduledShutdown)
	if [ "$?" -ne "0" ]; then
		return 1
	fi
	if [ "$(echo $TIMEOUT | awk "{print \$3}")" == "0" ]; then
		return 1
	else
		return 0
	fi
}
is_shutting_down_init_d() {
	pgrep shutdown
}
is_vfs_connected() {
	pgrep vfs-worker >/dev/null
}

if is_shutting_down; then
	if [[ ! $SHUTDOWN_TIMEOUT =~ ^[0-9]+$ ]] || is_vfs_connected; then
		sudo shutdown -c
	fi
else
	if [[ $SHUTDOWN_TIMEOUT =~ ^[0-9]+$ ]] && ! is_vfs_connected; then
		sudo shutdown -h $SHUTDOWN_TIMEOUT
	fi
fi' > "$VFS_CHECK_FILE_PATH"

chmod +x "$VFS_CHECK_FILE_PATH"

echo "* * * * * root $VFS_CHECK_FILE_PATH" > /etc/cron.d/c9-automatic-shutdown